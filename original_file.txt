MODULE 6 – File Management
ACCESS CONTROL:
•	The most common approach to the protection problem is to make access dependent on the identity of the user. 
•	Different users may need different types of access to a file or directory. 
•	The most general scheme to implement identity dependent access is to associate with each file and directory an access-control list (ACL) specifying user names and the types of access allowed for each user. 
•	When a user requests access to a particular file, the operating system checks the access list associated with that file. 
•	If that user is listed for the requested access, the access is allowed. Otherwise, a protection violation occurs, and the user job is denied access to the file. 
•	The main problem with access lists is their length. 
•	If we want to allow everyone to read a file, we must list all users with read access. 
•	This technique has two undesirable consequences: 
•	Constructing such a list may be a tedious and unrewarding task, especially if we do not know in advance the list of users in the system. 
•	The directory entry, previously of fixed size, now must be of variable size, resulting in more complicated space management. 
•	These problems can be resolved by use of a condensed version of the access list. To condense the length of the access-control list, many systems recognize three classifications of users in connection with each file:
•	Owner. The user who created the file is the owner. 
•	Group. A set of users who are sharing the file and need similar access is a group, or work group. 
•	Universe. All other users in the system constitute the universe.



FILE ALLOCATION METHODS
1.	Contiguous Allocation:
Each file takes up a set of contiguous blocks on the disk. Disk addresses define a linear ordering on the disk. If each block size on disc is 2 KB, then 30 KB of file would be allocated 15 contiguous blocks. Contiguous allocation of a file is defined by the disk address of first block and length. If the block file is m blocks and it starts at location i, then it takes up i, i+1, i+2…,i+m-1 blocks. The directory entry for each file specifies the address of starting block and total number of blocks allocated for this file.
Advantages:	Simple – Only starting location of block and length required.
Enables random access.
Disadvantages:	Wasteful of space. Files cannot grow.
 
2.	Linked List Allocation:
Linked allocation solves all problems of contiguous allocation. With linked allocation, each file is a linked list of disk blocks; the disk blocks may be scattered anywhere on the disk. The directory contains a pointer to the first and last blocks of the file. To read a file, we simply read blocks by following the pointers from block to block. There is no external fragmentation with linked allocation, and any free block on the free-space list can be used to satisfy a request. The size of a file need not be declared when the file is created. A file can continue to grow as long as free blocks are available. Consequently, it is never necessary to compact disk space.
Advantages:	Simple – needs only starting address
			Free space management – no waste of space
Disadvantages:	Inefficient to support direct access
			Space required by the pointers leading to memory wastage.
 
3.	Linked List Allocation Using a Table in Memory
Each block needs a pointer information, due to this entire block is not fully utilised to store data. To avoid the problem pointer information can be stored in file allocation table. This simple but efficient method of disk-space allocation. The table has one entry for each disk
block and is indexed by block number. The FAT is used in much the same way as a linked list. The directory entry contains the block number of the first block of the file. The table entry indexed by that block number contains the block number of the next block in the file. This chain continues until it reaches the last block.

Advantages:	No space required for pointers.
			Efficient memory utilization.
 
4.	Indexed Allocation:
Linked allocation solves the external-fragmentation and size-declaration problems of contiguous allocation. However, in the absence of a FAT, linked allocation cannot support efficient direct access, since the pointers to the blocks are scattered with the blocks themselves all over the disk and must be retrieved in order. Indexed allocation solves this problem by bringing all the pointers together into one location: the index block. Each file has its own index block, which is an array of disk-block addresses. The ith entry in the index block points to the ith block of the file. The directory contains the address of the index block.
Advantage:	Provides random access without suffering from external fragmentation.
 
			
